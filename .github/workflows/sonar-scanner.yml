name: SonarCloud

on:
  push:
    branches:
      - main

jobs:
  sonarcloud:
    name: SonarCloud
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install build-wrapper
        run: |
          wget https://sonarcloud.io/static/cpp/build-wrapper-linux-x86.zip
          unzip build-wrapper-linux-x86.zip
          mkdir -p bw-output
          chmod +x build-wrapper-linux-x86/build-wrapper-linux-x86-64

      - name: Clean Build Directory
        run: rm -rf C++/build1/

      - name: Create Build Directory
        run: mkdir -p C++/build1/

      - name: Configure
        run: |
          cd C++/build1/
          cmake ..

      - name: Verify CMakeCache.txt
        run: ls C++/build1/CMakeCache.txt

      - name: Run build-wrapper
        run: |
          cd C++/build1/
          ../../build-wrapper-linux-x86/build-wrapper-linux-x86-64 --out-dir ../../bw-output make

      - name: Verify compile_commands.json existence
        run: |
          find C++/build1/ -name compile_commands.json -exec echo "File found: {}" \;

      - name: Copy compile_commands.json
        run: |
          if [ -f C++/build1/compile_commands.json ]; then cp C++/build1/compile_commands.json .; else echo "compile_commands.json not found"; fi

      - name: List Build Directory
        run: ls C++/build1/

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        with:
          args: >
            -Dsonar.projectKey=tealerr_fundamental-programming
            -Dsonar.organization=tealerr
            -Dsonar.sources=C++
            -Dsonar.cfamily.build-wrapper-output=bw-output
            -Dsonar.exclusions=**/*.java

        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
